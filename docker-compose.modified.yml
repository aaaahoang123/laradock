services:
  nginx:
    networks:
      frontend:
        aliases:
          - topcv.local
          - account.ios.local
      backend:
        aliases:
          - topcv.local
          - account.ios.local
          - employee.ios.local
          - connect.ios.local
          - customer.ios.local
          - order.local
          - dktt.topcv.local
          - job.topcv.local
          - employer.local

  elasticsearch:
    volumes:
      - /etc/localtime:/etc/localtime:ro

  kibana:
    environment:
      # - ELASTICSEARCH_HOSTS=["http://10.6.34.6:9200"]
      - ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
      #         - ELASTICSEARCH_HOSTS=["http://10.14.34.69:9200"]
      #         - ELASTICSEARCH_HOSTS=["http://192.168.2.22:9201"]
      #         - ELASTICSEARCH_USERNAME=elastic
      #         - ELASTICSEARCH_PASSWORD=TO4KH0U1330oKMQ8xfLUX166

  kpi-service:
    build:
      context: ../codes/topcv/main/kpi
      dockerfile: Dockerfile-dev
      args:
        - PUID=${WORKSPACE_PUID}
        - PGID=${WORKSPACE_PGID}
        - NODE_VERSION=${WORKSPACE_NODE_VERSION}
    volumes:
      - ../codes/topcv/main/kpi:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    ports:
      - 8123:8000
    entrypoint: "php artisan octane:frankenphp --watch"
    networks:
      - backend
      - frontend

  php-fpm-old:
    extends:
      file: docker-compose.yml
      service: php-fpm
    build:
      context: ./php-fpm
      args:
        - LARADOCK_PHP_VERSION=${PHP_OLD_VERSION}

  bitwarden:
    image: vaultwarden/server:${BITWARDEN_VERSION}-alpine
    restart: always
    volumes:
      - ${BITWARDEN_LOG_PATH}:/log
      - ${DATA_PATH_HOST}/bitwarden:/data
    environment:
      - DOMAIN=${BITWARDEN_DOMAIN}
      - SMTP_HOST=${BITWARDEN_SMTP_HOST}
      - SMTP_PORT=${BITWARDEN_SMTP_PORT}
      - SMTP_FROM=${BITWARDEN_SMTP_FROM}
      - SMTP_FROM_NAME=${BITWARDEN_SMTP_FROM_NAME}
      - SMTP_USERNAME=${BITWARDEN_SMTP_USERNAME}
      - SMTP_PASSWORD=${BITWARDEN_SMTP_PASSWORD}
      - SMTP_SECURITY=${BITWARDEN_SMTP_SECURITY}
      - SIGNUPS_ALLOWED=${BITWARDEN_SIGNUPS_ALLOWED}
      - INVITATIONS_ALLOWED=${BITWARDEN_INVITATIONS_ALLOWED}
      - ADMIN_TOKEN=${BITWARDEN_ADMIN_TOKEN}
      - WEBSOCKET_ENABLED=${BITWARDEN_WEBSOCKET_ENABLED}
      - DATABASE_URL=${BITWARDEN_DATABASE_URL}
      - LOG_FILE=/log/bitwarden.log
    depends_on:
      - mariadb
    networks:
      - frontend
      - backend

  keycloak:
    environment:
      - KEYCLOAK_PRODUCTION=${KEYCLOAK_PRODUCTION}
      - KEYCLOAK_PROXY_HEADERS=${KEYCLOAK_PROXY_HEADERS-''}

  mongo:
    command: mongod --replSet rs0 --dbpath /data/db --port 27017
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
      - ./mongo/scripts:/scripts
    depends_on:
      - mongo-replica

  mongo-replica:
    command: mongod --replSet rs0 --dbpath /data/db --port 27018
    extends:
      service: mongo
      file: ./docker-compose.yml
    ports: !override
      - "27018:27018"
    volumes:
      - ${DATA_PATH_HOST}/mongo-replica:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb

  tabby:
    build: ./tabby-web
    restart: always
    depends_on:
      - mariadb
    ports:
      - ${TABBY_PORT}:80
    networks:
      - backend
    environment:
      # mysql://root:123@db/tabby
      - DATABASE_URL=${TABBY_DATABASE_URL}
      - PORT=80
      - DEBUG=False
      - SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=${TABBY_SOCIAL_AUTH_GOOGLE_OAUTH2_KEY}
      - SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=${TABBY_SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET}
      - DOCKERIZE_ARGS="-wait tcp://db:3306 -timeout 60s"
    # - APP_DIST_STORAGE="file:///app-dist"

  mattermost:
    depends_on:
      - postgres
    image: mattermost/${MATTERMOST_IMAGE}:${MATTERMOST_IMAGE_TAG}
    restart: ${MATTERMOST_RESTART_POLICY}
    security_opt:
      - no-new-privileges:true
    pids_limit: 200
    read_only: ${MATTERMOST_CONTAINER_READONLY}
    tmpfs:
      - /tmp
    networks:
      - backend
    volumes:
      - ${MATTERMOST_CONFIG_PATH}:/mattermost/config:rw
      - ${DATA_PATH_HOST}/mattermost:/mattermost/data:rw
      - ${MATTERMOST_LOGS_PATH}:/mattermost/logs:rw
      - ${MATTERMOST_PLUGINS_PATH}:/mattermost/plugins:rw
      - ${MATTERMOST_CLIENT_PLUGINS_PATH}:/mattermost/client/plugins:rw
      - ${MATTERMOST_BLEVE_INDEXES_PATH}:/mattermost/bleve-indexes:rw
      # When you want to use SSO with GitLab, you have to add the cert pki chain of GitLab inside Alpine
      # to avoid Token request failed: certificate signed by unknown authority
      # (link: https://github.com/mattermost/mattermost-server/issues/13059 and https://github.com/mattermost/docker/issues/34)
      # - ${GITLAB_PKI_CHAIN_PATH}:/etc/ssl/certs/pki_chain.pem:ro
    environment:
      # timezone inside container
      - TZ=${APP_TZ}

      # necessary Mattermost options/variables (see env.example)
      - MM_SQLSETTINGS_DRIVERNAME
      - MM_SQLSETTINGS_DATASOURCE

      # necessary for bleve
      - MM_BLEVESETTINGS_INDEXDIR

      # additional settings
      - MM_SERVICESETTINGS_SITEURL
